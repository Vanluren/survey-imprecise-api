// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using survey_imprecise_api.Data;

namespace survey_imprecise_api.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20200430100629_UpdateTables")]
    partial class UpdateTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("survey_imprecise_api.Models.Case", b =>
                {
                    b.Property<int>("CaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("CaseId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("survey_imprecise_api.Models.CaseParameter", b =>
                {
                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("ParameterId")
                        .HasColumnType("int");

                    b.HasKey("CaseId", "ParameterId");

                    b.HasIndex("ParameterId");

                    b.ToTable("CaseParameters");
                });

            modelBuilder.Entity("survey_imprecise_api.Models.Parameter", b =>
                {
                    b.Property<int>("ParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescriptionOne")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DescriptionTwo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Indicator")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("ParameterId");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("survey_imprecise_api.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("QuestionId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("survey_imprecise_api.Models.QuestionCases", b =>
                {
                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("CaseId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId", "CaseId");

                    b.HasIndex("CaseId");

                    b.ToTable("QuestionCases");
                });

            modelBuilder.Entity("survey_imprecise_api.Models.Respondant", b =>
                {
                    b.Property<int>("RespondantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Occupation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("RespondantId");

                    b.ToTable("Respondants");
                });

            modelBuilder.Entity("survey_imprecise_api.Models.Response", b =>
                {
                    b.Property<int>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ChosenCaseId")
                        .HasColumnType("int");

                    b.Property<int?>("RespondantId")
                        .HasColumnType("int");

                    b.HasKey("ResponseId");

                    b.HasIndex("ChosenCaseId");

                    b.HasIndex("RespondantId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("survey_imprecise_api.Models.CaseParameter", b =>
                {
                    b.HasOne("survey_imprecise_api.Models.Case", "Case")
                        .WithMany("Parameters")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("survey_imprecise_api.Models.Parameter", "Parameter")
                        .WithMany("Cases")
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("survey_imprecise_api.Models.QuestionCases", b =>
                {
                    b.HasOne("survey_imprecise_api.Models.Case", "Case")
                        .WithMany("Questions")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("survey_imprecise_api.Models.Question", "Question")
                        .WithMany("Cases")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("survey_imprecise_api.Models.Response", b =>
                {
                    b.HasOne("survey_imprecise_api.Models.Case", "ChosenCase")
                        .WithMany()
                        .HasForeignKey("ChosenCaseId");

                    b.HasOne("survey_imprecise_api.Models.Respondant", "Respondant")
                        .WithMany("Responses")
                        .HasForeignKey("RespondantId");
                });
#pragma warning restore 612, 618
        }
    }
}
